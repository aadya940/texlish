"civet jsxCode"
{ createEffect, createResource, createSignal, onMount } from solid-js
{ isServer } from solid-js/web
type { WorkerInput, WorkerOutput } from '../workers/playground.worker.civet'

let worker: Worker
let nextId: number
let msgMap: Map<number, (data: WorkerOutput) => void>
let ready: Promise<void>
unless isServer
  worker = new Worker
    new URL '../workers/playground.worker.civet.tsx', import.meta.url
    type: 'module'
  nextId = 1
  let readyResolve: => void
  ready = new Promise (resolve) => readyResolve = resolve
  msgMap = new Map [[0, readyResolve!]]
  worker.onmessage = ({ data:: WorkerOutput }) =>
    resolver := msgMap.get data.id
    if resolver?
      resolver data
      msgMap.delete data.id
    else
      console.warn 'Invalid ID from worker:', data.id

export function Playground({
  src: initialSrc:: string
  compiled: initialCompiled:: string
  html: initialHtml:: string
  complete?:: boolean
})
  [src, setSrc] := createSignal initialSrc
  [compiled] := createResource<WorkerOutput, string> src, (src) =>
    if isServer
      return {id: -1, tex: initialCompiled, html: initialHtml}
    else
      id := nextId++
      new Promise (done) =>
        msgMap.set id, done
        await ready
        worker.postMessage { id, src, complete }
  function rows
    (src().match(/\n/g)?# ?? 0) + 2

  let textarea: HTMLTextAreaElement
  function changeSrc(code: string)
    setSrc code
    textarea.value = code
  onMount =>  // ensure successful hydration before we change the example
    if code := window.localStorage.getItem 'code'
      changeSrc code
  createEffect =>
    window.localStorage.setItem 'code', src()

  <.example>
    <h5>'Enter Texlish code:'
    <h5>'Resulting LaTeX output:'
    <pre><textarea ref=textarea! rows() -spellcheck onInput=
      (e) => setSrc e.currentTarget.value
    >initialSrc
    <div innerHTML=compiled.latest?.html>
