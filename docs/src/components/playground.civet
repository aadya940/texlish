"civet jsxCode"
{ createResource, createSignal } from solid-js
{ isServer } from solid-js/web
type { WorkerInput, WorkerOutput } from '../workers/playground.worker.civet'

let worker: Worker
let nextId: number
let msgMap: Map<number, (data: WorkerOutput) => void>
unless isServer
  worker = new Worker
    new URL '../workers/playground.worker.civet.tsx', import.meta.url
    type: 'module'
  nextId = 0
  msgMap = new Map
  worker.onmessage = ({ data:: WorkerOutput }) =>
    resolver := msgMap.get data.id
    if resolver?
      resolver data
      msgMap.delete data.id
    else
      console.warn 'Invalid ID from worker:', data.id

export function Playground({
  src: initialSrc:: string
  compiled: initialCompiled:: string
  html: initialHtml:: string
  complete?:: boolean
})
  [src, setSrc] := createSignal initialSrc
  [compiled] := createResource<WorkerOutput, string> src, (src) =>
    if isServer
      return {id: -1, tex: initialCompiled, html: initialHtml}
    else
      id := nextId++
      new Promise (done) =>
        msgMap.set id, done
        worker.postMessage { id, src, complete }
  function rows
    (src().match(/\n/g)?# ?? 0) + 2

  <.example>
    <h5>'Enter Texlish code here:'
    <h5>'Resulting LaTeX output:'
    <pre><textarea rows() onInput=
      (e) => setSrc e.currentTarget.value
    >initialSrc
    <div innerHTML=compiled.latest?.html>
