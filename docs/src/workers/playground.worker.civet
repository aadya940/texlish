{ compile } from ../../../dist/main.js
{ createHighlighter } from shiki

export type WorkerInput
  id: number
  src: string
  complete?: boolean

export type WorkerOutput
  {
    id: number
    tex: string
    html: string
  } |
  {
    id: number
    error: string
    html: string
  }

declare const postMessage: (data: WorkerOutput) => void

themes :=
  light: 'github-light'
  dark: 'github-dark-high-contrast'
highlighter := await createHighlighter
  themes: Object.values themes
  langs: ['tex']

export function process(data: WorkerInput): WorkerOutput
  {id, src, complete} := data
  let tex: string, html: string
  try
    tex = compile src, fragment: !complete
    // Clean up output a bit for better alignment
    .replace /\n{3,}/g, '\n\n'
    html = highlighter.codeToHtml tex, {
      lang: 'tex'
      themes
    }
    return { id, tex, html }
  catch e
    error := (e as Error).message
    html := error
    .replace /&/g, '&amp;'
    .replace /</g, '&lt;'
    .replace />/g, '&gt;'
    return { id, error, html }

unless typeof onmessage is 'undefined'
  onmessage = ({data:: WorkerInput}): void =>
    postMessage process data
