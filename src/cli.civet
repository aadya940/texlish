fs from fs/promises
{ spawn } from child_process
{ compile, type CompilerOptions } from './main.civet'

function usage: void
  console.log '''
    Usage: texlish [options] filename

    Transpile from .texlish to .tex, and optionally compile with LaTeX.
    If you specify 'filename', we'll try 'filename.texlish' first.
    If you specify 'filename.tex', we'll try 'filename.texlish' first;
    if it doesn't exist, we can still build 'filename.tex' for you.

    To build with LaTeX, use one of the following options:
    --pdf / --pdflatex: Run pdflatex
    --lua / --lualatex: Run lualatex
    --xe / --xelatex: Run xelatex
    --latex / --dvi: Run latex

    Other options:
    --trace=filename: Debug compilation by writing a trace log
    -...: Other LaTeX command-line options are passed on as-is

  '''

function exists(path: string): Promise<boolean>
  try
    await fs.stat path
    return true
  catch
    return false

export function transpile(filename: string, options: CompilerOptions): Promise<string>
  input := await fs.readFile filename, 'utf8'
  output := compile input, {...options, filename}
  outFilename := filename.replace /\.texlish$|$/, '.tex'
  await fs.writeFile outFilename, output
  console.log `** ${filename} -> ${outFilename}`
  outFilename

export function cli: Promise<void>
  mode .= 'compile'
  flags .= []
  filenames .= []
  options: CompilerOptions .= {}
  for arg of process.argv[2..]
    switch arg
      /^--?pdf(latex)?$/
        mode = 'pdflatex'
      /^--?(dvi|latex)?$/
        mode = 'latex'
      /^--?lua(latex)?$/
        mode = 'lualatex'
      /^--?xe((la)?tex)?$/
        mode = 'xelatex'
      /^--?trace=/
        options.trace = arg[arg.indexOf('=')+1..]
      /^-/  // LaTeX command-line option
        flags.push arg
      else
        filenames.push arg

  return usage() unless filenames#

  for each filename of filenames
    let texFile: string
    if await exists filename + '.texlish'
      texFile = await transpile filename + '.texlish', options
    else if filename.toLowerCase().endsWith '.texlish'
      unless await exists filename
        console.log `!! Ignoring missing file: ${filename}`
        continue
      texFile = await transpile filename, options
    else if await exists filename + '.tex'
      texFile = filename + '.tex'
    else if filename.toLowerCase().endsWith '.tex'
      if await exists filename[...-4] + '.texlish'
        texFile = await transpile filename[...-4] + '.texlish', options
      else
        texFile = filename
        unless await exists texFile
          console.log `!! Ignoring missing file: ${texFile}`
          continue
    else
      console.log `!! Ignoring unknown file: ${filename}`
      continue

    unless mode is 'compile'
      args := [
        ...flags
        texFile
      ].map shellQuote
      console.log `** ${mode} ${args.join ' '}`
      spawn mode, args,
        stdio: 'inherit'
        shell: true

export function shellQuote(arg: string): string
  return arg if /^[A-Za-z0-9_\/.-]+$/.test arg
  if process.platform is 'win32'
    // Double-quote the argument and escape double quotes with doubling
    `"${arg.replace /"/g, '""'}"`
  else
    // Escape single quotes by closing, escaping, and reopening single quotes
    `'${arg.replace /'/g, "'\\''"}'`
