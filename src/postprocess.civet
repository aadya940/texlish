type { AST, CompilerOptions } from ./types.civet
{ iteratePrePost } from ./util.civet

defaultDocumentClass := "\\documentclass[11pt]{article}"

// Root node is always an array of statements
export function process(root: AST[], options: CompilerOptions): AST
  processDocument root unless options.fragment
  root

function liftsToPreamble(node: AST): boolean
  node is like { type: "Preamble" }, { type: "Use" }, { type: "Uses" }

// Automatic `\begin{document}`, `\end{document}`, `\maketitle`
function processDocument(root: AST[]): void
  // Find any existing \begin{document}, \end{document}, \maketitle, \title,
  // \documentclass in the document, and put them in `document`.
  // Collect any >>preamble and >>use blocks for possibly moving to preamble.
  document: Record<string, AST> .= {}
  preamble: AST[][] .= []
  preambleDepth .= 0
  for {node: parent, post} of iteratePrePost root
    // Keep track of "preamble depth" so we don't add descandants too
    if liftsToPreamble parent
      if post
        preambleDepth--
      else
        preambleDepth++
    continue if post
    // We process array parents of actual content so we can find siblings
    continue unless Array.isArray parent
    for each child, let i of parent
      if child is like { type: "Environment", env: "document" }
        document["\\begin"] = document["\\end"] = parent
      else if child is like { type: "Command" }
        switch child.token
          when "\\begin", "\\end"
            while parent[++i] is like /^\s*$/
            next := parent[i]
            if next is like { type: "Braced" } and
              next.body is like [ "document" ], [ [ "document" ] ], [ [ "document" ], [] ], [ [], [ "document" ] ]
              document[child.token] ?= parent
          when "\\maketitle", "\\title", "\\documentclass"
            document[child.token] ?= parent
      else if preambleDepth is 0 and liftsToPreamble child
        preamble.push parent

  // Add \end{document} as a final line if it doesn't exist
  unless document["\\end"]
    root.push "\n\\end{document}\n"

  // Add \begin{document} if it doesn't exist, before first environment,
  // header, unbraced text, etc.  Also add \maketitle if \title.
  unless document["\\begin"]
    var i = 0
    :line for line, var i of root
      switch line
        { type: "EOL" }
        [ { type: "Indent" } ]
        [ { type: "Indent" }, "\0" ]  // >>styles
        [ { type: "Indent" }, { type: "Comment" } ]
        [ { type: "Indent" }, { type: "Use" } ],
        [ { type: "Indent" }, { type: "Uses" } ],
        [ { type: "Indent" }, { type: "Preamble" } ]
          i := preamble.indexOf line
          preamble.splice i, 1 if i >= 0
        [ { type: "Indent" }, { type: "Braced" } ]
        ^document["\\end"]  // \begin{document} before \end{document}
          break :line
        ^document["\\maketitle"]  // \begin{document} before \maketitle
          break :line
        [ { type: "Indent" }, { type: "Command" }, ... ]
        else
          break :line
    root.splice i, 0, document["\\begin"] = ["\n\\begin{document}\n"]
    if document["\\title"] and not document["\\maketitle"]
      document["\\begin"][0] += "\\maketitle\n"

  if preamble#
    copy :=
      for each line of preamble
        [ line[..], '\n' ]
      .flat()
    (document["\\begin"] as AST[]).splice 0, 0, ...copy
    for each line of preamble
      line.splice 0, line.length, "\0"

  // Add \documentclass as first line if it doesn't exist
  unless document["\\documentclass"]
    root.unshift document["\\documentclass"] = defaultDocumentClass + "\n"
